# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:06:15+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AmazonResourceName(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ClientRequestToken(RootModel[SecretStr]):
    root: SecretStr


class ClientToken(RootModel[SecretStr]):
    root: SecretStr


class ConflictException(RootModel[Any]):
    root: Any


class CreateScheduledQueryResponse(BaseModel):
    Arn: AmazonResourceName


class DeleteScheduledQueryRequest(BaseModel):
    ScheduledQueryArn: AmazonResourceName


class DescribeEndpointsRequest(BaseModel):
    pass


class DescribeScheduledQueryRequest(BaseModel):
    ScheduledQueryArn: AmazonResourceName


class DimensionValueType(Enum):
    VARCHAR = 'VARCHAR'


class Double(RootModel[float]):
    root: float


class ErrorMessage(RootModel[str]):
    root: str


class InternalServerException(RootModel[Any]):
    root: Any


class InvalidEndpointException(RootModel[Any]):
    root: Any


class Long(RootModel[int]):
    root: int


class MaxQueryResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MaxScheduledQueriesResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MaxTagsForResourceResult(RootModel[conint(ge=1, le=200)]):
    root: conint(ge=1, le=200)


class MeasureValueType(Enum):
    BIGINT = 'BIGINT'
    BOOLEAN = 'BOOLEAN'
    DOUBLE = 'DOUBLE'
    VARCHAR = 'VARCHAR'
    MULTI = 'MULTI'


class NextScheduledQueriesResultsToken(RootModel[str]):
    root: str


class NextTagsForResourceResultsToken(RootModel[str]):
    root: str


class NullableBoolean(RootModel[bool]):
    root: bool


class PaginationToken(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class QueryExecutionException(RootModel[Any]):
    root: Any


class QueryId(RootModel[constr(pattern=r'[a-zA-Z0-9]+', min_length=1, max_length=64)]):
    root: constr(pattern=r'[a-zA-Z0-9]+', min_length=1, max_length=64)


class QueryStatus(BaseModel):
    CumulativeBytesMetered: Optional[Long] = None
    CumulativeBytesScanned: Optional[Long] = None
    ProgressPercentage: Optional[Double] = None


class QueryString(RootModel[SecretStr]):
    root: SecretStr


class ResourceName(RootModel[str]):
    root: str


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class S3BucketName(
    RootModel[
        constr(
            pattern=r'[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]', min_length=3, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]', min_length=3, max_length=63
    )


class S3EncryptionOption(Enum):
    SSE_S3 = 'SSE_S3'
    SSE_KMS = 'SSE_KMS'


class S3ObjectKey(RootModel[str]):
    root: str


class S3ObjectKeyPrefix(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9|!\-_*\'\(\)]([a-zA-Z0-9]|[!\-_*\'\(\)\/.])+',
            min_length=1,
            max_length=896,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9|!\-_*\'\(\)]([a-zA-Z0-9]|[!\-_*\'\(\)\/.])+',
        min_length=1,
        max_length=896,
    )


class S3ReportLocation(BaseModel):
    BucketName: Optional[S3BucketName] = None
    ObjectKey: Optional[S3ObjectKey] = None


class ScalarMeasureValueType(Enum):
    BIGINT = 'BIGINT'
    BOOLEAN = 'BOOLEAN'
    DOUBLE = 'DOUBLE'
    VARCHAR = 'VARCHAR'
    TIMESTAMP = 'TIMESTAMP'


class ScalarType(Enum):
    VARCHAR = 'VARCHAR'
    BOOLEAN = 'BOOLEAN'
    BIGINT = 'BIGINT'
    DOUBLE = 'DOUBLE'
    TIMESTAMP = 'TIMESTAMP'
    DATE = 'DATE'
    TIME = 'TIME'
    INTERVAL_DAY_TO_SECOND = 'INTERVAL_DAY_TO_SECOND'
    INTERVAL_YEAR_TO_MONTH = 'INTERVAL_YEAR_TO_MONTH'
    UNKNOWN = 'UNKNOWN'
    INTEGER = 'INTEGER'


class ScalarValue(RootModel[str]):
    root: str


class ScheduleExpression(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class ScheduledQueryName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=64)


class ScheduledQueryRunStatus(Enum):
    AUTO_TRIGGER_SUCCESS = 'AUTO_TRIGGER_SUCCESS'
    AUTO_TRIGGER_FAILURE = 'AUTO_TRIGGER_FAILURE'
    MANUAL_TRIGGER_SUCCESS = 'MANUAL_TRIGGER_SUCCESS'
    MANUAL_TRIGGER_FAILURE = 'MANUAL_TRIGGER_FAILURE'


class ScheduledQueryState(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class SchemaName(RootModel[str]):
    root: str


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SnsConfiguration(BaseModel):
    TopicArn: AmazonResourceName


class String(RootModel[str]):
    root: str


class StringValue2048(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class ThrottlingException(RootModel[Any]):
    root: Any


class Time(RootModel[datetime]):
    root: datetime


class Timestamp(RootModel[str]):
    root: str


class TimestreamDestination(BaseModel):
    DatabaseName: Optional[ResourceName] = None
    TableName: Optional[ResourceName] = None


class UntagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateScheduledQueryRequest(BaseModel):
    ScheduledQueryArn: AmazonResourceName
    State: ScheduledQueryState


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    Timestream_20181101_CancelQuery = 'Timestream_20181101.CancelQuery'


class XAmzTarget1(Enum):
    Timestream_20181101_CreateScheduledQuery = (
        'Timestream_20181101.CreateScheduledQuery'
    )


class XAmzTarget2(Enum):
    Timestream_20181101_DeleteScheduledQuery = (
        'Timestream_20181101.DeleteScheduledQuery'
    )


class XAmzTarget3(Enum):
    Timestream_20181101_DescribeEndpoints = 'Timestream_20181101.DescribeEndpoints'


class XAmzTarget4(Enum):
    Timestream_20181101_DescribeScheduledQuery = (
        'Timestream_20181101.DescribeScheduledQuery'
    )


class XAmzTarget5(Enum):
    Timestream_20181101_ExecuteScheduledQuery = (
        'Timestream_20181101.ExecuteScheduledQuery'
    )


class XAmzTarget6(Enum):
    Timestream_20181101_ListScheduledQueries = (
        'Timestream_20181101.ListScheduledQueries'
    )


class XAmzTarget7(Enum):
    Timestream_20181101_ListTagsForResource = 'Timestream_20181101.ListTagsForResource'


class XAmzTarget8(Enum):
    Timestream_20181101_PrepareQuery = 'Timestream_20181101.PrepareQuery'


class XAmzTarget9(Enum):
    Timestream_20181101_Query = 'Timestream_20181101.Query'


class XAmzTarget10(Enum):
    Timestream_20181101_TagResource = 'Timestream_20181101.TagResource'


class XAmzTarget11(Enum):
    Timestream_20181101_UntagResource = 'Timestream_20181101.UntagResource'


class XAmzTarget12(Enum):
    Timestream_20181101_UpdateScheduledQuery = (
        'Timestream_20181101.UpdateScheduledQuery'
    )


class CancelQueryRequest(BaseModel):
    QueryId_1: QueryId = Field(..., alias='QueryId')


class CancelQueryResponse(BaseModel):
    CancellationMessage: Optional[String] = None


class DimensionMapping(BaseModel):
    DimensionValueType_1: DimensionValueType = Field(..., alias='DimensionValueType')
    Name: SchemaName


class DimensionMappingList(RootModel[List[DimensionMapping]]):
    root: List[DimensionMapping]


class Endpoint(BaseModel):
    Address: String
    CachePeriodInMinutes: Long


class Endpoints(RootModel[List[Endpoint]]):
    root: List[Endpoint]


class ErrorReportLocation(BaseModel):
    S3ReportLocation_1: Optional[S3ReportLocation] = Field(
        None, alias='S3ReportLocation'
    )


class ExecuteScheduledQueryRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    InvocationTime: Time
    ScheduledQueryArn: AmazonResourceName


class ExecutionStats(BaseModel):
    BytesMetered: Optional[Long] = None
    DataWrites: Optional[Long] = None
    ExecutionTimeInMillis: Optional[Long] = None
    QueryResultRows: Optional[Long] = None
    RecordsIngested: Optional[Long] = None


class ListScheduledQueriesRequest(BaseModel):
    MaxResults: Optional[MaxScheduledQueriesResults] = None
    NextToken: Optional[NextScheduledQueriesResultsToken] = None


class ListTagsForResourceRequest(BaseModel):
    MaxResults: Optional[MaxTagsForResourceResult] = None
    NextToken: Optional[NextTagsForResourceResultsToken] = None
    ResourceARN: AmazonResourceName


class MultiMeasureAttributeMapping(BaseModel):
    MeasureValueType: ScalarMeasureValueType
    SourceColumn: SchemaName
    TargetMultiMeasureAttributeName: Optional[SchemaName] = None


class MultiMeasureAttributeMappingList(RootModel[List[MultiMeasureAttributeMapping]]):
    root: List[MultiMeasureAttributeMapping] = Field(..., min_length=1)


class MultiMeasureMappings(BaseModel):
    MultiMeasureAttributeMappings: MultiMeasureAttributeMappingList
    TargetMultiMeasureName: Optional[SchemaName] = None


class NotificationConfiguration(BaseModel):
    SnsConfiguration_1: SnsConfiguration = Field(..., alias='SnsConfiguration')


class PrepareQueryRequest(BaseModel):
    QueryString_1: QueryString = Field(..., alias='QueryString')
    ValidateOnly: Optional[NullableBoolean] = None


class QueryRequest(BaseModel):
    ClientToken: Optional[ClientRequestToken] = None
    MaxRows: Optional[MaxQueryResults] = None
    NextToken: Optional[PaginationToken] = None
    QueryString_1: QueryString = Field(..., alias='QueryString')


class S3Configuration(BaseModel):
    BucketName: S3BucketName
    EncryptionOption: Optional[S3EncryptionOption] = None
    ObjectKeyPrefix: Optional[S3ObjectKeyPrefix] = None


class ScheduleConfiguration(BaseModel):
    ScheduleExpression_1: ScheduleExpression = Field(..., alias='ScheduleExpression')


class ScheduledQueryRunSummary(BaseModel):
    ErrorReportLocation_1: Optional[ErrorReportLocation] = Field(
        None, alias='ErrorReportLocation'
    )
    ExecutionStats_1: Optional[ExecutionStats] = Field(None, alias='ExecutionStats')
    FailureReason: Optional[ErrorMessage] = None
    InvocationTime: Optional[Time] = None
    RunStatus: Optional[ScheduledQueryRunStatus] = None
    TriggerTime: Optional[Time] = None


class ScheduledQueryRunSummaryList(RootModel[List[ScheduledQueryRunSummary]]):
    root: List[ScheduledQueryRunSummary]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class TargetDestination(BaseModel):
    TimestreamDestination_1: Optional[TimestreamDestination] = Field(
        None, alias='TimestreamDestination'
    )


class DescribeEndpointsResponse(BaseModel):
    Endpoints_1: Endpoints = Field(..., alias='Endpoints')


class ErrorReportConfiguration(BaseModel):
    S3Configuration_1: S3Configuration = Field(..., alias='S3Configuration')


class ListTagsForResourceResponse(BaseModel):
    NextToken: Optional[NextTagsForResourceResultsToken] = None
    Tags: TagList


class MixedMeasureMapping(BaseModel):
    MeasureName: Optional[SchemaName] = None
    MeasureValueType_1: MeasureValueType = Field(..., alias='MeasureValueType')
    MultiMeasureAttributeMappings: Optional[MultiMeasureAttributeMappingList] = None
    SourceColumn: Optional[SchemaName] = None
    TargetMeasureName: Optional[SchemaName] = None


class MixedMeasureMappingList(RootModel[List[MixedMeasureMapping]]):
    root: List[MixedMeasureMapping] = Field(..., min_length=1)


class ScheduledQuery(BaseModel):
    Arn: AmazonResourceName
    CreationTime: Optional[Time] = None
    ErrorReportConfiguration_1: Optional[ErrorReportConfiguration] = Field(
        None, alias='ErrorReportConfiguration'
    )
    LastRunStatus: Optional[ScheduledQueryRunStatus] = None
    Name: ScheduledQueryName
    NextInvocationTime: Optional[Time] = None
    PreviousInvocationTime: Optional[Time] = None
    State: ScheduledQueryState
    TargetDestination_1: Optional[TargetDestination] = Field(
        None, alias='TargetDestination'
    )


class ScheduledQueryList(RootModel[List[ScheduledQuery]]):
    root: List[ScheduledQuery]


class TimestreamConfiguration(BaseModel):
    DatabaseName: ResourceName
    DimensionMappings: DimensionMappingList
    MeasureNameColumn: Optional[SchemaName] = None
    MixedMeasureMappings: Optional[MixedMeasureMappingList] = None
    MultiMeasureMappings_1: Optional[MultiMeasureMappings] = Field(
        None, alias='MultiMeasureMappings'
    )
    TableName: ResourceName
    TimeColumn: SchemaName


class ListScheduledQueriesResponse(BaseModel):
    NextToken: Optional[NextScheduledQueriesResultsToken] = None
    ScheduledQueries: ScheduledQueryList


class TargetConfiguration(BaseModel):
    TimestreamConfiguration_1: TimestreamConfiguration = Field(
        ..., alias='TimestreamConfiguration'
    )


class CreateScheduledQueryRequest(BaseModel):
    ClientToken_1: Optional[ClientToken] = Field(None, alias='ClientToken')
    ErrorReportConfiguration_1: ErrorReportConfiguration = Field(
        ..., alias='ErrorReportConfiguration'
    )
    KmsKeyId: Optional[StringValue2048] = None
    Name: ScheduledQueryName
    NotificationConfiguration_1: NotificationConfiguration = Field(
        ..., alias='NotificationConfiguration'
    )
    QueryString_1: QueryString = Field(..., alias='QueryString')
    ScheduleConfiguration_1: ScheduleConfiguration = Field(
        ..., alias='ScheduleConfiguration'
    )
    ScheduledQueryExecutionRoleArn: AmazonResourceName
    Tags: Optional[TagList] = None
    TargetConfiguration_1: Optional[TargetConfiguration] = Field(
        None, alias='TargetConfiguration'
    )


class ScheduledQueryDescription(BaseModel):
    Arn: AmazonResourceName
    CreationTime: Optional[Time] = None
    ErrorReportConfiguration_1: Optional[ErrorReportConfiguration] = Field(
        None, alias='ErrorReportConfiguration'
    )
    KmsKeyId: Optional[StringValue2048] = None
    LastRunSummary: Optional[ScheduledQueryRunSummary] = None
    Name: ScheduledQueryName
    NextInvocationTime: Optional[Time] = None
    NotificationConfiguration_1: NotificationConfiguration = Field(
        ..., alias='NotificationConfiguration'
    )
    PreviousInvocationTime: Optional[Time] = None
    QueryString_1: QueryString = Field(..., alias='QueryString')
    RecentlyFailedRuns: Optional[ScheduledQueryRunSummaryList] = None
    ScheduleConfiguration_1: ScheduleConfiguration = Field(
        ..., alias='ScheduleConfiguration'
    )
    ScheduledQueryExecutionRoleArn: Optional[AmazonResourceName] = None
    State: ScheduledQueryState
    TargetConfiguration_1: Optional[TargetConfiguration] = Field(
        None, alias='TargetConfiguration'
    )


class DescribeScheduledQueryResponse(BaseModel):
    ScheduledQuery: ScheduledQueryDescription


class ColumnInfo(BaseModel):
    Name: Optional[String] = None
    Type_1: Type = Field(..., alias='Type')


class ColumnInfoList(RootModel[List[ColumnInfo]]):
    root: List[ColumnInfo]


class Datum(BaseModel):
    ArrayValue: Optional[DatumList] = None
    NullValue: Optional[NullableBoolean] = None
    RowValue: Optional[Row] = None
    ScalarValue_1: Optional[ScalarValue] = Field(None, alias='ScalarValue')
    TimeSeriesValue: Optional[TimeSeriesDataPointList] = None


class DatumList(RootModel[List[Datum]]):
    root: List[Datum]


class ParameterMapping(BaseModel):
    Name: String
    Type_1: Type = Field(..., alias='Type')


class ParameterMappingList(RootModel[List[ParameterMapping]]):
    root: List[ParameterMapping]


class PrepareQueryResponse(BaseModel):
    Columns: SelectColumnList
    Parameters: ParameterMappingList
    QueryString_1: QueryString = Field(..., alias='QueryString')


class QueryResponse(BaseModel):
    ColumnInfo: ColumnInfoList
    NextToken: Optional[PaginationToken] = None
    QueryId_1: QueryId = Field(..., alias='QueryId')
    QueryStatus_1: Optional[QueryStatus] = Field(None, alias='QueryStatus')
    Rows: RowList


class Row(BaseModel):
    Data: DatumList


class RowList(RootModel[List[Row]]):
    root: List[Row]


class SelectColumn(BaseModel):
    Aliased: Optional[NullableBoolean] = None
    DatabaseName: Optional[ResourceName] = None
    Name: Optional[String] = None
    TableName: Optional[ResourceName] = None
    Type_1: Optional[Type] = Field(None, alias='Type')


class SelectColumnList(RootModel[List[SelectColumn]]):
    root: List[SelectColumn]


class TimeSeriesDataPoint(BaseModel):
    Time: Timestamp
    Value: Datum


class TimeSeriesDataPointList(RootModel[List[TimeSeriesDataPoint]]):
    root: List[TimeSeriesDataPoint]


class Type(BaseModel):
    ArrayColumnInfo: Optional[ColumnInfo] = None
    RowColumnInfo: Optional[ColumnInfoList] = None
    ScalarType_1: Optional[ScalarType] = Field(None, alias='ScalarType')
    TimeSeriesMeasureValueColumnInfo: Optional[ColumnInfo] = None


ColumnInfo.model_rebuild()
Datum.model_rebuild()
ParameterMapping.model_rebuild()
PrepareQueryResponse.model_rebuild()
QueryResponse.model_rebuild()
SelectColumn.model_rebuild()
